
matrix:
  include:
    # Native OSX, and IOS builds
    - os: osx
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL
      language: c
          
    - os: osx   
      env: BUILD=native CC=clang CXX=clang++ FRAMEWORK=SDL2
      language: c
      
    - os: osx
      env: BUILD=IOS BUILD_FOLDER=build/IOS
      language: c
           
    # Linux and other X-platform Docker builds     
    - os: linux
      env: DOCKER=YES BUILD=linux CC=gcc CXX=g++ FRAMEWORK=SDL MODE=release BUILD_FOLDER=build/Unix/x86
      language: ruby
      services:
        - docker
        
    - os: linux
      env: DOCKER=YES BUILD=linux CC=gcc CXX=g++ FRAMEWORK=SDL2 MODE=release BUILD_FOLDER=build/Unix/x86
      language: ruby
      services:
        - docker
    
    - os: linux
      env: DOCKER=YES BUILD=linux ARCH=arm CC=gcc CXX=g++ FRAMEWORK=SDL2 MODE=release BUILD_FOLDER=build/Unix/ARM
      language: ruby
      services:
        - docker 
    
    - os: linux
      env: DOCKER=YES BUILD=psp BUILD_FOLDER=build/PSP
      language: ruby
      services:
        - docker
            
    - os: linux
      env: DOCKER=YES BUILD=dreamcast BUILD_FOLDER=build/Dreamcast
      language: ruby
      services:
        - docker
        
    - os: linux
      env: DOCKER=YES BUILD=vita BUILD_FOLDER=build/Vita
      language: ruby
      services:
        - docker
    
    - os: linux
      env: DOCKER=YES BUILD=emscripten BUILD_FOLDER=build/WebAsm
      language: ruby
      services:
        - docker
            
    - os: linux
      env: DOCKER=YES BUILD=android BUILD_FOLDER=build/Android
      language: ruby
      services:
        - docker

  
install:
    - if [ "$ARCH" == "arm" ]; then sudo apt-get --yes --no-install-recommends install binfmt-support qemu-user-static; fi
 
    # Docker build setup  
    - if [ "$DOCKER" == "YES" ]; then docker build -t plutoboy -f $BUILD_FOLDER/Dockerfile .; fi 

    # OSX/IOS build setup 
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi

    # Native OSX build setup
    - if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$BUILD" == "native" ]; then brew install scons; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install sdl sdl2 sdl_net sdl2_net; fi

    #Setup SDL2 framework for XCode IOS
    - if [ "$BUILD" == "IOS" ]; then git clone https://github.com/manifest/sdl-ios-framework; fi
    - if [ "$BUILD" == "IOS" ]; then cd sdl-ios-framework; fi 
    - if [ "$BUILD" == "IOS" ]; then gem install colorize; fi 
    - if [ "$BUILD" == "IOS" ]; then rake SDL2:build; fi
    - if [ "$BUILD" == "IOS" ]; then mkdir ~/Library/Frameworks/; fi 
    - if [ "$BUILD" == "IOS" ]; then cp -r build/sdl/SDL2.framework ~/Library/Frameworks/; fi


script: 
    # Docker linux build
    - if [ "$BUILD" == "linux" ]; then docker run -e cc=$CC -e framework=$FRAMEWORK -e mode=$MODE plutoboy; fi

    # Docker x-platform builds
    - if [ "$BUILD" != "linux" ] && [ "$DOCKER" == "YES" ]; then docker run plutoboy; fi

    # Native OSX builds
    - if [ "$BUILD" == "native" ]; then cd build/Unix; fi
    - if [ "$BUILD" == "native" ]; then scons cc=$CC framework=$FRAMEWORK mode=$MODE; fi
   
    # IOS Builds
    - if [ "$BUILD" == "IOS" ]; then cd ~/build/RossMeikleham/PlutoBoy/build/IOS; fi
    - if [ "$BUILD" == "IOS" ]; then xcodebuild -project Plutoboy.xcodeproj -target Plutoboy -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO; fi
